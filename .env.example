# ================================
# HELPERNOTE Environment Configuration
# ================================
# Copy this file to backend/.env and frontend/.env as needed
# For production, use Kubernetes Secrets

# ================================
# Application Identity
# ================================
APP_NAME=helpernote
PROJECT_NAME=helpernote

# ================================
# Domain Configuration
# ================================
# Apex domain (e.g., example.com)
APEX_DOMAIN=example.com

# Frontend domain (e.g., www.example.com)
FRONTEND_DOMAIN=www.example.com

# Backend API domain (e.g., api.example.com)
BACKEND_DOMAIN=api.example.com

# MinIO public domain (e.g., minio.example.com)
MINIO_PUBLIC_DOMAIN=files.example.com

# Full URLs
FRONTEND_URL=https://www.example.com
API_URL=https://api.example.com
DEPLOYMENT_URL=${FRONTEND_URL}

# ================================
# Backend Configuration
# ================================
# Server binding
SERVER_HOST=0.0.0.0
SERVER_PORT=8000

# Logging
RUST_LOG=info,helpernote=debug

# CORS allowed origins (comma-separated)
CORS_ALLOWED_ORIGINS=https://example.com,https://www.example.com

# ================================
# Database Configuration
# ================================
# PostgreSQL credentials
POSTGRES_DB=helpernote
POSTGRES_USER=helpernote
POSTGRES_PASSWORD=CHANGE_ME_SECURE_PASSWORD
POSTGRES_HOST=prod-postgres
POSTGRES_PORT=5432

# Computed values
DB_NAME=${POSTGRES_DB}
DB_USER=${POSTGRES_USER}
DB_PASSWORD=${POSTGRES_PASSWORD}
DB_HOST=${POSTGRES_HOST}
DB_PORT=${POSTGRES_PORT}

# Full database URL
DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}

# ================================
# Authentication & Security
# ================================
# JWT configuration
JWT_SECRET=CHANGE_ME_SECURE_RANDOM_SECRET_KEY_MIN_64_CHARS
JWT_EXPIRATION=86400

# ================================
# MinIO Object Storage
# ================================
# MinIO endpoint (internal service URL)
MINIO_ENDPOINT=http://prod-minio:9000

# MinIO credentials
MINIO_ROOT_USER=minioadmin
MINIO_ROOT_PASSWORD=CHANGE_ME_MINIO_ROOT_PASSWORD
MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}

# MinIO bucket name
MINIO_BUCKET=helpernote

# MinIO region (can be any string for self-hosted)
MINIO_REGION=us-east-1

# ================================
# Frontend Configuration
# ================================
# API URL for frontend
NEXT_PUBLIC_API_URL=${API_URL}

# ================================
# GitHub Container Registry
# ================================
CONTAINER_REGISTRY=ghcr.io
GITHUB_ORG=YOUR_GITHUB_USERNAME
GITHUB_REPO=helpernote

# Container image names
BACKEND_IMAGE_NAME=helpernote-backend
FRONTEND_IMAGE_NAME=helpernote-frontend
BACKEND_IMAGE=${CONTAINER_REGISTRY}/${GITHUB_ORG}/${BACKEND_IMAGE_NAME}
FRONTEND_IMAGE=${CONTAINER_REGISTRY}/${GITHUB_ORG}/${FRONTEND_IMAGE_NAME}

# ================================
# Kubernetes Configuration
# ================================
# Namespace
K8S_NAMESPACE=helpernote
K8S_DEV_NAMESPACE=helpernote-dev

# Resource name prefix (for production)
RESOURCE_NAME_PREFIX=prod-

# Service names (will be prefixed)
POSTGRES_SERVICE=postgres
MINIO_SERVICE=minio
BACKEND_SERVICE=backend
FRONTEND_SERVICE=frontend

# Deployment names
POSTGRES_DEPLOYMENT=postgres
MINIO_DEPLOYMENT=minio
BACKEND_DEPLOYMENT=backend
FRONTEND_DEPLOYMENT=frontend

# Ingress configuration
INGRESS_NAME=helpernote-ingress
APEX_REDIRECT_INGRESS_NAME=helpernote-apex-redirect
TLS_SECRET_NAME=helpernote-wildcard-tls
RATE_LIMIT_PLUGIN_NAME=rate-limiting-helpernote

# Storage class
STORAGE_CLASS_NAME=local-path

# Labels
APP_LABEL_NAME=helpernote

# ================================
# ArgoCD Configuration
# ================================
# ArgoCD application names
ARGOCD_APP_NAME=helpernote-production
ARGOCD_DEV_APP_NAME=helpernote-dev

# Git repository URL
ARGOCD_REPO_URL=https://github.com/${GITHUB_ORG}/${GITHUB_REPO}.git

# Target revision
ARGOCD_TARGET_REVISION=main

# ArgoCD credentials (for CI/CD)
ARGOCD_SERVER=argocd.example.com
# ARGOCD_TOKEN=YOUR_ARGOCD_TOKEN (set in GitHub Secrets)

# ================================
# Docker Configuration (Development)
# ================================
# Docker Compose container names
POSTGRES_CONTAINER_NAME=helpernote-postgres
POSTGRES_DEV_CONTAINER_NAME=helpernote-postgres-dev
MINIO_CONTAINER_NAME=helpernote-minio
MINIO_DEV_CONTAINER_NAME=helpernote-minio-dev
BACKEND_CONTAINER_NAME=helpernote-backend
FRONTEND_CONTAINER_NAME=helpernote-frontend
DOCKER_NETWORK_NAME=helpernote-network

# Development endpoints
DEV_MINIO_ENDPOINT=http://localhost:9000
DEV_DATABASE_URL=postgresql://helpernote:helpernote@localhost:5432/helpernote
DEV_API_URL=http://localhost:8000

# ================================
# Build Configuration
# ================================
# Backend binary name
BINARY_NAME=helpernote-backend

# ================================
# Deployment Configuration
# ================================
# Environment (development, staging, production)
ENVIRONMENT=production

# ================================
# Cert-Manager (if used)
# ================================
CERT_ISSUER=letsencrypt-prod

# ================================
# Notes
# ================================
# 1. Backend Environment Variables:
#    - Copy relevant sections to backend/.env
#    - Required: DATABASE_URL, JWT_SECRET, MINIO_* variables
#
# 2. Frontend Environment Variables:
#    - Copy relevant sections to frontend/.env
#    - Required: NEXT_PUBLIC_API_URL
#
# 3. Kubernetes Secrets:
#    - Use scripts/create-k8s-secrets.sh to generate secrets
#    - Never commit real passwords to git
#
# 4. MinIO Configuration:
#    - Change default minioadmin credentials in production
#    - Bucket is created automatically on first backend start
#    - Ensure MinIO endpoint is accessible from backend
#
# 5. Security Best Practices:
#    - Use strong passwords (minimum 32 characters)
#    - Rotate secrets every 90 days
#    - Use different credentials for dev/staging/prod
#    - JWT_SECRET should be cryptographically random
#    - Never log or expose secrets in application code
#
# 6. Development vs Production:
#    - Development: Use docker-compose with local services
#    - Production: Use Kubernetes with proper secrets management
#    - Consider using external secret managers (Vault, AWS Secrets Manager, etc.)
#
# 7. Database Migrations:
#    - Migrations run automatically on backend startup
#    - Ensure DATABASE_URL is correct before starting
#
# 8. CORS Configuration:
#    - Add all frontend domains to CORS_ALLOWED_ORIGINS
#    - Comma-separated list without spaces
