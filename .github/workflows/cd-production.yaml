name: CD - Production Deployment

on:
  push:
    branches:
      - main

# Prevent concurrent deployments to the same environment
# When a new deployment starts, cancel any in-progress deployment
concurrency:
  group: production-deployment
  cancel-in-progress: true

env:
  # Container Registry
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}

  # Application Configuration
  BACKEND_DOMAIN: api.helpernote.my
  FRONTEND_DOMAIN: www.helpernote.my

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    # Production environment protection with manual approval
    environment:
      name: production
      url: https://www.helpernote.my
    permissions:
      contents: read
      packages: write
      security-events: write  # For security scanning

    outputs:
      backend_tag: ${{ steps.get-tags.outputs.backend_tag }}
      frontend_tag: ${{ steps.get-tags.outputs.frontend_tag }}
      backend_image: ${{ steps.meta-backend.outputs.json }}
      frontend_image: ${{ steps.meta-frontend.outputs.json }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/helpernote-backend
          tags: |
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=production,enable={{is_default_branch}}
          flavor: |
            latest=false
      
      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/helpernote-frontend
          tags: |
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=production,enable={{is_default_branch}}
          flavor: |
            latest=false
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_API_URL=https://${{ env.BACKEND_DOMAIN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract first tag for scanning
        id: get-tags
        run: |
          BACKEND_TAG=$(echo "${{ steps.meta-backend.outputs.tags }}" | head -n1)
          FRONTEND_TAG=$(echo "${{ steps.meta-frontend.outputs.tags }}" | head -n1)
          echo "backend_tag=$BACKEND_TAG" >> $GITHUB_OUTPUT
          echo "frontend_tag=$FRONTEND_TAG" >> $GITHUB_OUTPUT
          echo "Backend tag for scanning: $BACKEND_TAG"
          echo "Frontend tag for scanning: $FRONTEND_TAG"

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      packages: read
      actions: read
      security-events: write

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy scanner - Backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.backend_tag }}
          format: 'sarif'
          output: 'trivy-backend.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results - Backend
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-backend.sarif'
          category: 'backend'

      - name: Run Trivy scanner - Frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.frontend_tag }}
          format: 'sarif'
          output: 'trivy-frontend.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results - Frontend
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-frontend.sarif'
          category: 'frontend'

  update-manifests:
    name: Update K8s Manifests
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Use PAT for pushing to protected branches and triggering workflows
          # Create at: Settings > Developer settings > Personal access tokens
          # Permissions needed: Contents (write), Workflows (write)
          token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}

      - name: Generate short SHA
        id: short-sha
        run: echo "sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Update image tags in Kustomization
        run: |
          cd k8s/overlays/production

          # Update backend image tag
          sed -i "s|newTag:.*|newTag: main-${{ steps.short-sha.outputs.sha }}|g" kustomization.yaml

          # Commit and push changes
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add kustomization.yaml
          # Use [skip ci] to prevent triggering another workflow run
          git commit -m "chore: update production image tags to main-${{ steps.short-sha.outputs.sha }} [skip ci]" || echo "No changes to commit"
          git push

  trigger-argocd-sync:
    name: Trigger ArgoCD Sync
    runs-on: ubuntu-latest
    needs: update-manifests

    steps:
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Trigger ArgoCD Application Sync
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          if [ -z "$ARGOCD_SERVER" ] || [ -z "$ARGOCD_AUTH_TOKEN" ]; then
            echo "‚ö†Ô∏è  ArgoCD credentials not configured. Skipping automatic sync."
            echo "üìù Please configure ARGOCD_SERVER and ARGOCD_TOKEN secrets."
            echo "üìã Image tags updated to: main-${{ github.sha }}"
            echo ""
            echo "To manually sync:"
            echo "  argocd app sync helpernote-production"
            echo "  or visit ArgoCD UI"
            exit 0
          fi

          echo "üöÄ Triggering ArgoCD sync for helpernote-production..."
          argocd app sync helpernote-production \
            --server "$ARGOCD_SERVER" \
            --auth-token "$ARGOCD_AUTH_TOKEN" \
            --prune \
            --timeout 300 || {
              echo "‚ùå ArgoCD sync failed. Please check ArgoCD manually."
              exit 1
            }

          echo "‚úÖ ArgoCD sync initiated successfully"

      - name: Wait for ArgoCD Sync Completion
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          if [ -z "$ARGOCD_SERVER" ] || [ -z "$ARGOCD_AUTH_TOKEN" ]; then
            exit 0
          fi

          echo "‚è≥ Waiting for ArgoCD sync to complete and application to be healthy..."
          argocd app wait helpernote-production \
            --server "$ARGOCD_SERVER" \
            --auth-token "$ARGOCD_AUTH_TOKEN" \
            --health \
            --timeout 600 || {
              echo "‚ùå Deployment health check timeout. Check ArgoCD for details."
              exit 1
            }

          echo "‚úÖ Application is healthy and synced"

  verify-deployment:
    name: Verify Deployment Health
    runs-on: ubuntu-latest
    needs: trigger-argocd-sync

    steps:
      - name: Wait for deployment to stabilize
        run: sleep 30

      - name: Health Check - Backend API
        run: |
          echo "üîç Checking backend health..."
          for i in {1..10}; do
            if curl -f -s -o /dev/null -w "%{http_code}" https://${{ env.BACKEND_DOMAIN }}/health | grep -q "200"; then
              echo "‚úÖ Backend health check passed (attempt $i)"
              exit 0
            fi
            echo "‚è≥ Attempt $i failed, retrying in 10s..."
            sleep 10
          done
          echo "‚ùå Backend health check failed after 10 attempts"
          exit 1

      - name: Health Check - Frontend
        run: |
          echo "üîç Checking frontend health..."
          for i in {1..10}; do
            HTTP_CODE=$(curl -f -s -o /dev/null -w "%{http_code}" https://${{ env.FRONTEND_DOMAIN }})
            if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 304 ]; then
              echo "‚úÖ Frontend health check passed (attempt $i, HTTP $HTTP_CODE)"
              exit 0
            fi
            echo "‚è≥ Attempt $i failed (HTTP $HTTP_CODE), retrying in 10s..."
            sleep 10
          done
          echo "‚ùå Frontend health check failed after 10 attempts"
          exit 1

      - name: Smoke Test - API Endpoints
        run: |
          echo "üß™ Running smoke tests..."

          # Test backend root
          if ! curl -f -s https://${{ env.BACKEND_DOMAIN }}/ | grep -q "Helpernote API"; then
            echo "‚ùå Backend root endpoint failed"
            exit 1
          fi
          echo "‚úÖ Backend root endpoint OK"

          echo "‚úÖ All smoke tests passed"

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan, update-manifests, trigger-argocd-sync, verify-deployment]
    if: always()

    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [ "${{ needs.build-and-push.result }}" == "success" ] && \
             [ "${{ needs.security-scan.result }}" == "success" ] && \
             [ "${{ needs.update-manifests.result }}" == "success" ] && \
             [ "${{ needs.trigger-argocd-sync.result }}" == "success" ] && \
             [ "${{ needs.verify-deployment.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "icon=‚úÖ" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "icon=‚ùå" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: vars.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v2
        with:
          payload: |
            {
              "text": "${{ steps.status.outputs.icon }} Production Deployment ${{ steps.status.outputs.status }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.status.outputs.icon }} Production Deployment"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {"type": "mrkdwn", "text": "*Status:*\n${{ steps.status.outputs.status }}"},
                    {"type": "mrkdwn", "text": "*Environment:*\nProduction"},
                    {"type": "mrkdwn", "text": "*Commit:*\n<${{ github.event.head_commit.url }}|${{ github.sha }}>"},
                    {"type": "mrkdwn", "text": "*Author:*\n${{ github.actor }}"}
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Message:* ${{ github.event.head_commit.message }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*URLs:*\n‚Ä¢ Frontend: https://${{ env.FRONTEND_DOMAIN }}\n‚Ä¢ Backend: https://${{ env.BACKEND_DOMAIN }}/health"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Console notification
        run: |
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "${{ steps.status.outputs.icon }} Deployment Status: ${{ steps.status.outputs.status }}"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "Build & Push:        ${{ needs.build-and-push.result }}"
          echo "Security Scan:       ${{ needs.security-scan.result }}"
          echo "Update Manifests:    ${{ needs.update-manifests.result }}"
          echo "ArgoCD Sync:         ${{ needs.trigger-argocd-sync.result }}"
          echo "Health Verification: ${{ needs.verify-deployment.result }}"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "Backend Tag:  ${{ needs.build-and-push.outputs.backend_tag }}"
          echo "Frontend Tag: ${{ needs.build-and-push.outputs.frontend_tag }}"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

          if [ "${{ steps.status.outputs.status }}" != "success" ]; then
            echo "‚ùå Deployment had failures. Check the logs above."
            exit 1
          fi
