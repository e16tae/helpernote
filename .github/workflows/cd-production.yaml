name: CD - Production Deployment

on:
  push:
    branches:
      - main

env:
  # Container Registry
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}

  # Application Configuration
  BACKEND_DOMAIN: api.helpernote.com
  FRONTEND_DOMAIN: www.helpernote.com

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      backend_tag: ${{ steps.meta-backend.outputs.tags }}
      frontend_tag: ${{ steps.meta-frontend.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/helpernote-backend
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/helpernote-frontend
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_API_URL=https://${{ env.BACKEND_DOMAIN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-manifests:
    name: Update K8s Manifests
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update image tags in Kustomization
        run: |
          cd k8s/overlays/production
          
          # Update backend image tag
          sed -i "s|newTag:.*|newTag: main-${{ github.sha }}|g" kustomization.yaml
          
          # Commit and push changes
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add kustomization.yaml
          git commit -m "chore: update production image tags to ${{ github.sha }}" || echo "No changes to commit"
          git push

  trigger-argocd-sync:
    name: Trigger ArgoCD Sync
    runs-on: ubuntu-latest
    needs: update-manifests
    
    steps:
      - name: Trigger ArgoCD Sync
        run: |
          echo "ArgoCD will automatically detect the manifest changes and sync"
          echo "Image tags updated to: main-${{ github.sha }}"
          echo ""
          echo "To manually sync, run:"
          echo "  kubectl apply -f argocd/helpernote-production.yaml"
          echo "Or use ArgoCD CLI/UI to sync the application"

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-push, update-manifests]
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.build-and-push.result }}" == "success" ] && [ "${{ needs.update-manifests.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "Backend: ${{ needs.build-and-push.outputs.backend_tag }}"
            echo "Frontend: ${{ needs.build-and-push.outputs.frontend_tag }}"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
