name: CI - Develop Branch

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

# Allow concurrent CI runs for different commits, but cancel outdated runs
concurrency:
  group: ci-develop-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: helpernote
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: helpernote_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: backend/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run rustfmt check
        working-directory: ./backend
        run: cargo fmt -- --check
      
      - name: Run clippy
        working-directory: ./backend
        env:
          SQLX_OFFLINE: true
        run: cargo clippy -- -D warnings

      - name: Run tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://helpernote:testpassword@localhost:5432/helpernote_test
          SQLX_OFFLINE: true
        run: cargo test --verbose

      - name: Build backend
        working-directory: ./backend
        env:
          SQLX_OFFLINE: true
        run: cargo build --release

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run linter
        working-directory: ./frontend
        run: npm run lint
      
      - name: Run type check
        working-directory: ./frontend
        run: npx tsc --noEmit
      
      - name: Build frontend
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
        run: npm run build

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: helpernote-backend:dev-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: helpernote-frontend:dev-${{ github.sha }}
          build-args: |
            NEXT_PUBLIC_API_URL=http://localhost:8000
          cache-from: type=gha
          cache-to: type=gha,mode=max
