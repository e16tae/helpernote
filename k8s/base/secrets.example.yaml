# ⚠️  SECURITY WARNING: This is a template file
# 민감한 값을 직접 커밋하지 마세요.
# 이 파일을 임시로 편집한 뒤 `./scripts/seal-secrets.sh --manifest ...`를 실행해
# 암호화된 SealedSecret YAML을 `k8s/sealed-secrets/`에 생성하고 커밋하세요.
#
# 예시) openssl 명령으로 안전한 랜덤 값 생성:
#   openssl rand -base64 32
#
# To base64 encode a value:
#   echo -n "your-secret-value" | base64

apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
type: Opaque
data:
  # Base64 encoded values (use: echo -n "value" | base64)
  database: REPLACE_WITH_BASE64_ENCODED_DATABASE_NAME  # e.g., helpernote
  username: REPLACE_WITH_BASE64_ENCODED_USERNAME       # e.g., helpernote
  password: REPLACE_WITH_BASE64_ENCODED_PASSWORD       # Generate with: openssl rand -base64 32
---
apiVersion: v1
kind: Secret
metadata:
  name: minio-secret
type: Opaque
data:
  # Base64 encoded MinIO credentials
  access-key: REPLACE_WITH_BASE64_ENCODED_ACCESS_KEY  # Generate with: openssl rand -base64 24
  secret-key: REPLACE_WITH_BASE64_ENCODED_SECRET_KEY  # Generate with: openssl rand -base64 32
---
apiVersion: v1
kind: Secret
metadata:
  name: backend-secret
type: Opaque
data:
  # Base64 encoded DATABASE_URL
  # Format: postgresql://user:password@host:port/database
  # Example: postgresql://helpernote:YOUR_PASSWORD@prod-postgres:5432/helpernote
  database-url: REPLACE_WITH_BASE64_ENCODED_DATABASE_URL

  # Base64 encoded JWT secret (should be long and random)
  jwt-secret: REPLACE_WITH_BASE64_ENCODED_JWT_SECRET  # Generate with: openssl rand -base64 64
